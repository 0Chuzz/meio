%{
#include "parser.h"

%}

%pure_parser
%start main
%union{
    token_t terminal;
    iomessagecall_t messageCall;
    iomessagearguments_t messageArguments;
    iomessage_t message;
    iomessagechain_t message;
    iomessagesuite_t message;
}

%token <terminal> NUMBER
%token <terminal> HEXNUMBER
%token <terminal> IDENTIFIER
%token <terminal> OPERATOR
%token <terminal> ENDEXPR
%token <terminal> STRING
%token <terminal> COMMA
%token <terminal> LPAREN
%token <terminal> RPAREN
%token <terminal> LBRACKET
%token <terminal> RBRACKET
%token <terminal> LCURLY
%token <terminal> RCURLY

%type <terminal> messageName
%type <messageCall> messageCall
%type <messageCall> messageSquare
%type <messageCall> messageCurly
%type <terminal> messageConst
%type <messageArguments> messageArguments
%type <message> message
%type <messageChain> messageChain
%type <terminal> suiteSeparator
%type <messageSuite> messageSuite
%type <messageSuite> main

%%
messageName: IDENTIFIER
           | OPERATOR
           ;

messageCall: LPAREN messageArguments RPAREN 
                { $$.name = ""; $$.arguments = $2; }
           | LPAREN RPAREN
                { $$.name = ""; $$.arguments = NULL;}
           | messageName LPAREN messageArguments RPAREN
                { $$.name = $1; $$.arguments = $3; }
           | messageName LPAREN RPAREN
                { $$.name = $1; $$.arguments = NULL;}
           ;

messageSquare: LBRACKET messageArguments RBRACKET
                {$$.name = "squareBrackets"; $$.arguments = $2; }
             | LBRACKET RBRACKET
                {$$.name = "squareBrackets"; $$.arguments = NULL;}
             ;

messageCurly: LCURLY messageArguments RCURLY
                {$$.name = "squareBrackets"; $$.arguments = $2; }
            | LCURLY RCURLY
                {$$.name = "squareBrackets"; $$.arguments = $2; }
            ;

messageConst: NUMBER
            | HEXNUMBER
            | STRING

messageArguments: messageArguments COMMA messageSuite
                    { $1.next = $3; $$ = $1; }
                | messageSuite
                    { $1.next = $1; $$ = $1; }
                ;

message: messageConst
            { $$.type = CONST; $$.value = $1; }
       | messageCall
            { $$.type = CALL; $$.value = $1; }
       | messageSquare
            { $$.type = CALL; $$.value = $1; }
       | messageCurly
            { $$.type = CALL; $$.value = $1; }
       ;

messageChain: messageChain message
                { $$.head = $2; $$.rest = $1; }
            ;

suiteSeparator: suiteSeparator ENDEXPR
              | ENDEXPR;

messageSuite: messageSuite suiteSeparator messageChain
                { $$.head = $3; $$.rest = $1 ;}
            | messageChain
                { $$.head = $1; $$rest = NULL;}
            ;

main : suiteSeparator messageSuite suiteSeparator
            { $$ = $2 ;}
     ;

%%

